/*
 * Copyright 2017 Dries007
 *
 * Licensed under the EUPL, Version 1.1 only (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl5
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

archivesBaseName = 'CurseModpackDownloader'
group = 'net.dries007.cmd'
def buildNr = System.getenv().BUILD_NUMBER ?: 'SNAPSHOT'
version = '1.0.0.' + buildNr

configurations {
    compile
    deployJars
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: "com.google.code.gson", name: "gson", version: "2.8.0"
    compile group: "org.apache.commons", name: "commons-io", version: "1.3.2"
    compile group: "com.beust", name: "jcommander", version: "1.64"
    compile group: "net.lingala.zip4j", name: "zip4j", version: "1.3.2"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '*.properties'
        expand 'version': project.version, 'build': System.getenv().BUILD_NUMBER
    }
}

ext.sharedManifest = manifest {
    attributes(
            "Specification-Title": project.name,
            "Specification-Version": project.version,
            "Specification-Vendor": "Dries007",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "Dries007",
            "Main-Class": project.group + ".Main",
            "Dependencies": configurations.runtime.allDependencies.collect { "${it.group}:${it.name}:${it.version}" }.join(',')
    )
}

jar {
    from "LICENSE"
    manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    classifier = 'src'

    from "LICENSE"
    from sourceSets.main.allSource
    manifest {
        from sharedManifest
    }
}

task fatJar(type: Jar) {
    classifier = 'all'

    from "LICENSE"
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
    manifest {
        from sharedManifest
    }

    with jar
}

artifacts {
    archives jar
    archives sourcesJar
    archives fatJar
}
