buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: "com.github.rodionmoiseev.gradle.plugins", name: "idea-utils", version: "0.2"
    }
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "idea-utils"

archivesBaseName = "CurseModpackDownloader"
group = "net.doubledoordev.cmd"

version = "0.1.0"
if (System.getenv().BUILD_NUMBER != null) version += "." + System.getenv().BUILD_NUMBER

def githuborg = "DoubleDoorDevelopment"

sourceCompatibility = 1.7
targetCompatibility = 1.7

//noinspection GroovyAssignabilityCheck
configurations {
    compile
    deployJars
}

idea {
    project {
        copyright {
            name = "GPL"
            license = file("LICENSE-HEADER.txt")
        }
        runConfigurations {
            Launcher {
                name = "Client"
                type = "Application"
                mainClass = project.group + ".Main"
                file("run/").mkdir()
                module = project
                workingDirectory = file("run/")
            }
        }
    }
}

repositories {
    mavenCentral()
}

//noinspection GroovyAssignabilityCheck
dependencies {
    compile group: "com.google.code.gson", name: "gson", version: "2.2.4"
    compile group: "org.apache.commons", name: "commons-io", version: "1.3.2"
    compile group: "com.beust", name: "jcommander", version: "1.48"
    compile group: "net.lingala.zip4j", name: "zip4j", version: "1.3.2"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '*.properties'
        expand 'version': project.version, 'build': System.getenv().BUILD_NUMBER
    }
}

jar {
    from "LICENSE.txt"
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes(
                "Created-By": githuborg,
                "Specification-Title": project.name,
                "Specification-Version": project.version,
                "Specification-Vendor": githuborg,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": githuborg,
                "Main-Class": project.group + ".Main"
        )
    }
}

task sourcesJar(type: Jar) {
    from "LICENSE.txt"
    from sourceSets.main.allSource
    classifier = 'src'
}

artifacts {
    archives jar
    archives sourcesJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

uploadArchives {
    if (project.hasProperty("dddUser") && project.hasProperty("dddUrl") && project.hasProperty("dddPass")) {
        repositories {
            mavenDeployer {
                repository(url: dddUrl) {
                    authentication(userName: dddUser, password: dddPass)
                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description = description
                        url 'https://github.com/' + githuborg + '/' + project.archivesBaseName

                        scm {
                            url 'https://github.com/' + githuborg + '/' + project.archivesBaseName
                            connection 'scm:git:git://github.com/' + githuborg + '/' + project.archivesBaseName + '.git'
                            developerConnection 'scm:git:git@github.com:' + githuborg + '/' + project.archivesBaseName + '.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/' + githuborg + '/' + project.archivesBaseName + '/issues'
                        }

                        licenses  {
                            license  {
                                name 'New BSD License'
                                url 'https://raw.github.com/' + githuborg + '/' + project.archivesBaseName + '/master/LICENCE.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'Dries007'
                                name 'Dries007'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
